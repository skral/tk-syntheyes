from plugin import TrackingPlugin
import tracker_converter
import tracker_converter.utils

SPLIT_CHAR = " "


class SynthEyesFilePlugin(TrackingPlugin):

    # SynthEyes does not offer direct Python access, instead opting to offer a scripting language (Sizzle) which can
    # invoke Python. As such, all data is passed to/from Sizzle in the form of text file; there is no other time-
    # efficient way to pass large quantities of data.
    # When SynthEyes exports trackers, they are written to file as x-y pairs, with coordinates ranging between -1 and 1.
    # The bottom right corner is (1, 1), and the upper-left is (-1, -1).

    def _encode_to_internal(self, point, shot=None):
        """
        :param tracker_converter.utils.Point point: a tuple representing an x-y position, with the x-y values ranging
                                                    between -1 and 1.
        :param None|tracker_converter.utils.Shot shot: This value is not used and None may be passed safely.
        :return: a tuple representing an x-y position, with the x-y values ranging between -1 and 1.
        :rtype: tracker_converter.utils.Point
        :raises: ValueError if the point passed is outside of the expected range for SynthEyes.
        """

        # TODO: removed exception handling for testing purposes.
        # x_not_in_range = not -1 < point.x < 1
        # y_not_in_range = not -1 < point.y < 1
        #
        # if x_not_in_range or y_not_in_range:
        #     raise ValueError("Values outside of the program format's range were passed.")

        # To encode to the internal format, we simply need to invert the y-value (multiply by -1).

        x = point.x
        y = -1 * point.y

        return tracker_converter.Point(x, y)

    def _decode_from_internal(self, point, shot=None):
        """
        :param tracker_converter.utils.Point point: a tuple representing an x-y position, with the x-y values ranging
                                                    between -1 and 1.
        :param None|tracker_converter.utils.Shot shot: This value is not used and None may be passed safely.
        :return: a tuple representing an x-y position, with the x-y values ranging between -1 and 1.
        :rtype: tracker_converter.utils.Point
        :raises: ValueError if the point passed is outside of the expected range for our internal format.
        """
        # To decode from the internal format, we simply need to invert the y-value (multiply by -1).

        # TODO: removed exception handling for testing purposes.
        # x_not_in_range = not -1 < point.x < 1
        # y_not_in_range = not -1 < point.y < 1
        #
        # if x_not_in_range or y_not_in_range:
        #     raise ValueError("Values outside of the program format's range were passed.")

        x = point.x
        y = -1 * point.y

        return tracker_converter.Point(x, y)

    def trackers_to_internal(self, file_path, shot):
        """
        This function reads from a file generated by SynthEyes' native export feature, and returns a list of Tracker
        objects.

        :param str file_path: the file path.
        :param tracker_converter.utils.Shot shot: a tuple representing the shot - a width and height of plate, and frame
                                                  offset.
        :return: A list of Tracker objects, with x-y values ranging between -1 and 1. The frame numbers of the Trackers
                 assume that the frame number of the first plate is zero.
        :rtype: list[tracker_converter.utils.Tracker...]
        """
        with open(file_path, "rb") as file_handle:
            contents = file_handle.read().strip("\n")

        lines = contents.split("\n")

        trackers = {}

        for line in lines:
            words = line.split(SPLIT_CHAR)
            name = words[0]
            frame = int(words[1])
            x = words[2]
            y = words[3]
            if name not in trackers:
                trackers[name] = tracker_converter.utils.Tracker(name)
            point = self._encode_to_internal(tracker_converter.utils.Point(x, y), None)
            trackers[name].add_frame(int(frame) - shot.offset, point)

        return trackers.values()

    def internal_to_trackers(self, tracker_list, file_path, shot):
        """
        This function takes a list of Tracker objects and writes a text file which can be imported to SynthEyes.

        :param list[Tracker...] tracker_list: a list of Tracker objects with x-y values ranging between -1 and 1.
        :param str file_path: the text file to which the data should be written.
        :param tracker_converter.utils.Shot shot: a tuple representing the shot - a width and height of plate, and frame
                                                  offset.
        :return: the path of the file to be passed to Sizzle.
        :rtype: str
        """
        encoded_data = []

        for tracker in tracker_list:
            for frame in tracker.frame_numbers:
                encoded_point = self._decode_from_internal(tracker.point_at(frame))
                encoded_data.append("{} {} {} {}".format(tracker.name,
                                                         str(int(frame) + shot.offset),
                                                         str(encoded_point.x),
                                                         str(encoded_point.y)
                                                         )
                                    )

        encoded_text = "\n".join(encoded_data)

        with open(file_path, "wb") as fh:
            fh.write(encoded_text)
